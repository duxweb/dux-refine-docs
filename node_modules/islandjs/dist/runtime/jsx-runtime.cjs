"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtime/island-jsx-runtime.js
var island_jsx_runtime_exports = {};
__export(island_jsx_runtime_exports, {
  Fragment: () => Fragment2,
  data: () => data,
  jsx: () => jsx2,
  jsxs: () => jsxs2
});
module.exports = __toCommonJS(island_jsx_runtime_exports);
var jsxRuntime = __toESM(require("react/jsx-runtime"), 1);
var data = {
  islandProps: [],
  islandToPathMap: {}
};
var originJsx = jsxRuntime.jsx;
var originJsxs = jsxRuntime.jsxs;
var internalJsx = (jsx3, type, props, ...args) => {
  if (props && props.__island) {
    data.islandProps.push(props || {});
    const id = type.name;
    data.islandToPathMap[id] = props.__island;
    delete props.__island;
    return jsx3("div", {
      __island: `${id}:${data.islandProps.length - 1}`,
      children: jsx3(type, props, ...args)
    });
  }
  return jsx3(type, props, ...args);
};
var jsx2 = (...args) => internalJsx(originJsx, ...args);
var jsxs2 = (...args) => internalJsx(originJsxs, ...args);
var Fragment2 = jsxRuntime.Fragment;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Fragment,
  data,
  jsx,
  jsxs
});
