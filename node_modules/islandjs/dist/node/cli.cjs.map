{"version":3,"sources":["../../package.json","../../src/node/cli.ts","../../src/node/build.ts","../../src/node/serve.ts"],"names":["require_package","__commonJSMin","exports","module","resolve","cac","viteBuild","path","join","dirname","fs","copy","pathExists","remove","ora","createDebugger","performance","pc","pathToFileURL","debug","islandInjectId","okMark","failMark","SSGBuilder","#root","#config","#cliOptions","#clientBundle","#serverBundle","#distPath","#islandsInjectCache","config","cliOptions","DIST_DIR","spinner","clientBundle","serverBundle","#clientBuild","#ssrBuild","TEMP_PATH","publicDirInRoot","PUBLIC_DIR","serverEntryPath","SERVER_OUTPUT_PATH","render","routes","dynamicImport","e","clientEntryChunk","chunk","clientChunkCode","styleAssets","item","clientChunkInfo","route","#renderPage","#render404Page","VENDOR_PATH","injectCode","#baseBuild","DEFAULT_EXTERNALS","id","MASK_SPLITTER","originId","importer","_options","bundle","name","routePath","clientChunk","helmetContext","appHtml","propsData","islandToPathMap","pageData","hasIsland","injectIslandsPath","islandHash","createHash","injectBundlePromise","rawInjectCode","#generateIslandInjectCode","injectBundle","helmet","headTag","tag","attrs","children","attrString","pre","cur","normalizeVendorFilename","fileName","withBaseUrl","url","withBase","html","normalizedBase","normalizeSlash","islandName","isServer","options","displayName","resolveViteConfig","createVitePlugins","SERVER_ENTRY_PATH","CLIENT_ENTRY_PATH","startTime","buildResult","timeConsumed","build","root","resolveConfig","builder","sirv","compression","polka","serve","port","host","base","notAnAsset","pathname","distPath","notFoundPage","onNoMatch","req","res","compress","err","version","cli","devOptions","createServer","createDevServer","server","buildOptions","serveOptions"],"mappings":"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","sourcesContent":["{\n  \"name\": \"islandjs\",\n  \"version\": \"0.7.31\",\n  \"description\": \"Vite & Islands architecture SSG framework\",\n  \"packageManager\": \"pnpm@7.9.2\",\n  \"type\": \"module\",\n  \"main\": \"dist/node/index.cjs\",\n  \"module\": \"dist/node/index.js\",\n  \"types\": \"dist/node/index.d.ts\",\n  \"bin\": {\n    \"island\": \"./bin/island.js\"\n  },\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/node/index.js\",\n      \"require\": \"./dist/node/index.cjs\"\n    },\n    \"./dist/*\": \"./dist/*\",\n    \"./package.json\": \"./package.json\",\n    \"./theme\": {\n      \"types\": \"./theme.d.ts\",\n      \"default\": \"./src/theme-default/index.ts\"\n    },\n    \"./runtime\": {\n      \"type\": \"./runtime.d.ts\",\n      \"default\": \"./src/runtime/index.ts\"\n    }\n  },\n  \"scripts\": {\n    \"pnpm-install\": \"pnpm install\",\n    \"dev\": \"tsup --watch --format=cjs,esm\",\n    \"build\": \"cross-env NODE_ENV=production tsup --format=cjs,esm && tsx scripts/pre-bundle.cts\",\n    \"prepublishOnly\": \"pnpm build\",\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\",\n    \"inspect\": \"serve .vite-inspect\"\n  },\n  \"keywords\": [\n    \"vite\",\n    \"ssg\",\n    \"island architecture\",\n    \"docs\",\n    \"framework\"\n  ],\n  \"author\": \"Sanyuan0704\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@babel/core\": \"7.18.6\",\n    \"@babel/helper-plugin-utils\": \"7.18.6\",\n    \"@iconify-json/carbon\": \"1.1.8\",\n    \"@islandjs/plugin-backtop\": \"0.7.31\",\n    \"@islandjs/plugin-search\": \"0.7.31\",\n    \"@mdx-js/mdx\": \"2.1.3\",\n    \"@mdx-js/react\": \"2.1.3\",\n    \"@mdx-js/rollup\": \"2\",\n    \"@svgr/core\": \"6.3.1\",\n    \"@unocss/preset-attributify\": \"0.45.26\",\n    \"@unocss/preset-icons\": \"0.45.29\",\n    \"@unocss/preset-wind\": \"0.45.26\",\n    \"@unocss/vite\": \"0.45.26\",\n    \"@vitejs/plugin-react\": \"2.0.1\",\n    \"acorn\": \"8.8.0\",\n    \"body-scroll-lock\": \"4.0.0-beta.0\",\n    \"cac\": \"6.7.12\",\n    \"compression\": \"1.7.4\",\n    \"copy-to-clipboard\": \"3.3.2\",\n    \"debug\": \"4.3.4\",\n    \"esbuild\": \"0.15.5\",\n    \"fast-glob\": \"3.2.11\",\n    \"fs-extra\": \"10.1.0\",\n    \"github-slugger\": \"1.4.0\",\n    \"hast\": \"1.0.0\",\n    \"hast-util-from-html\": \"1.0.0\",\n    \"husky\": \"8.0.1\",\n    \"lodash-es\": \"4.17.21\",\n    \"mdast-util-mdxjs-esm\": \"1.3.0\",\n    \"medium-zoom\": \"1.0.6\",\n    \"nprogress\": \"^0.2.0\",\n    \"ora\": \"6.1.2\",\n    \"picocolors\": \"1.0.0\",\n    \"polka\": \"0.5.2\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-helmet-async\": \"1.3.0\",\n    \"react-router-dom\": \"6.3.0\",\n    \"rehype-autolink-headings\": \"6.1.1\",\n    \"rehype-external-links\": \"2.0.1\",\n    \"rehype-highlight\": \"5.0.2\",\n    \"rehype-slug\": \"5.0.1\",\n    \"remark-directive\": \"2.0.1\",\n    \"remark-frontmatter\": \"4.0.1\",\n    \"remark-gemoji\": \"7.0.1\",\n    \"remark-gfm\": \"3.0.1\",\n    \"remark-mdx-frontmatter\": \"2.0.3\",\n    \"sass\": \"1.54.5\",\n    \"shiki\": \"0.11.1\",\n    \"simple-git\": \"3.14.1\",\n    \"sirv\": \"2.0.2\",\n    \"unified\": \"10.1.2\",\n    \"unist-util-visit\": \"4.1.1\",\n    \"unist-util-visit-children\": \"2.0.0\",\n    \"unocss\": \"0.45.26\",\n    \"vite\": \"~3.1.4\",\n    \"vite-plugin-inspect\": \"0.7.4\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-react\": \"7.18.6\",\n    \"@babel/traverse\": \"^7.19.0\",\n    \"@types/babel__core\": \"^7.1.19\",\n    \"@types/babel__helper-plugin-utils\": \"^7.10.0\",\n    \"@types/babel__traverse\": \"^7.18.1\",\n    \"@types/compression\": \"^1.7.2\",\n    \"@types/debug\": \"^4.1.7\",\n    \"@types/fs-extra\": \"^9.0.13\",\n    \"@types/github-slugger\": \"^1.3.0\",\n    \"@types/hast\": \"^2.3.4\",\n    \"@types/koa\": \"^2.13.5\",\n    \"@types/koa-router\": \"^7.4.4\",\n    \"@types/lodash-es\": \"^4.17.6\",\n    \"@types/nprogress\": \"^0.2.0\",\n    \"@types/polka\": \"^0.5.4\",\n    \"@types/react\": \"^18.0.17\",\n    \"@types/react-dom\": \"^18.0.6\",\n    \"@types/resolve\": \"^1.20.2\",\n    \"es-module-lexer\": \"^1.0.3\",\n    \"resolve\": \"^1.22.1\",\n    \"typescript\": \"4.7.4\"\n  },\n  \"files\": [\n    \"bin\",\n    \"src/runtime\",\n    \"src/theme-default\",\n    \"dist\",\n    \"vendors\",\n    \"template.html\",\n    \"src/shared/constants\",\n    \"src/shared/utils\",\n    \"src/shared/types\",\n    \"runtime.d.ts\",\n    \"theme.d.ts\"\n  ],\n  \"lint-staged\": {\n    \"**/*.{js,jsx,tsx,ts,json}\": [\n      \"eslint --fix\"\n    ]\n  }\n}\n","import { resolve } from 'path';\nimport { cac } from 'cac';\nimport { build } from './build';\nimport { serve } from './serve';\nimport { CLIServeOption } from './serve';\nimport type { UserConfig } from 'vite';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst version = require('./../../package.json');\n\nconst cli = cac('island').version(version).help();\nexport interface CLIDevOption extends UserConfig {\n  force?: boolean;\n  config?: string;\n  '--'?: string[];\n}\nexport interface CLIBuildOption extends UserConfig {\n  config?: string;\n  force?: boolean;\n  sourcemap?: boolean | 'inline' | 'hidden';\n}\ncli.option(\n  '--config [config]',\n  '[string]explicitly specify a config file to use with the --config CLI option'\n);\ncli\n  .command('[root]', 'start dev server') // default command\n  .alias('dev')\n  .option('--host <host>', '[string] specify hostname')\n  .option('-p, --port <port>', '[number] specify port')\n  .option('--cacheDir [cacheDir]', '[string] set the directory of cache')\n  .option(\n    '--force [force]',\n    '[boolean] force the optimizer to ignore the cache and re-bundle'\n  )\n  .option('-m, --mode <mode>', '[string] set env mode')\n  .option('-l, --logLevel <level>', '[string] info | warn | error | silent')\n  .option('--clearScreen', '[boolean] allow/disable clear screen when logging')\n  .option('--https', '[boolean] use TLS + HTTP/2')\n  .option('--cors', '[boolean] enable CORS')\n  .option('--strictPort', '[boolean] exit if specified port is already in use')\n  .option('--open [path]', '[boolean | string] open browser on startup')\n  .action(async (root: string, devOptions: CLIDevOption) => {\n    try {\n      root = resolve(root);\n      const createServer = async () => {\n        const { createDevServer } = await import(`./dev.js?t=${Date.now()}`);\n        const server = await createDevServer(root, devOptions, async () => {\n          await server.close();\n          await createServer();\n        });\n        await server.listen();\n        server.printUrls();\n      };\n      await createServer();\n    } catch (e) {\n      console.log(e);\n      process.exit(1);\n    }\n  });\n\ncli\n  .command('build [root]', 'build for production') // default command\n  .option(\n    '--force [force]',\n    '[boolean] force the optimizer to ignore the cache and re-bundle'\n  )\n  .option(\n    '--sourcemap',\n    '[boolean] output source maps for build (default: false)'\n  )\n  .action(async (root: string, buildOptions: CLIBuildOption) => {\n    try {\n      root = resolve(root);\n      await build(root, buildOptions);\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\ncli\n  .command('start [root]', 'serve for production') // default command\n  .option('--port <port>', 'port to use for serve')\n  .option('--host <host>', '[string] specify hostname')\n  .action(async (root: string, serveOptions: CLIServeOption) => {\n    try {\n      root = resolve(root);\n      await serve(root, serveOptions);\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\ncli.parse();\n","/**\n * In production build, we should do following steps:\n * 1. Bundle client and ssr entry code, get clientBundle and serverBundle\n * 2. Execute serverBundle to get render function and routes\n * 3. Render pages to static html string (renderToString)\n * 4. Get island components from render process, and bundle the components together.We call this bundle as islandBundle,\n    and the island components will be hang on window so that client bundle can access them.\n * 5. Inject islandBundle and client bundle to html string, as well as island props data.\n * 6. Write html string to file.\n */\n\nimport { InlineConfig, build as viteBuild } from 'vite';\nimport { SiteConfig } from '../shared/types';\nimport { resolveConfig } from './config';\nimport {\n  CLIENT_ENTRY_PATH,\n  DEFAULT_EXTERNALS,\n  DIST_DIR,\n  MASK_SPLITTER,\n  PUBLIC_DIR,\n  SERVER_ENTRY_PATH,\n  SERVER_OUTPUT_PATH,\n  TEMP_PATH,\n  VENDOR_PATH\n} from './constants';\nimport { createVitePlugins } from './vitePlugin';\nimport path, { join, dirname } from 'path';\nimport { OutputAsset, OutputChunk, RollupOutput } from 'rollup';\nimport { createHash, dynamicImport } from './utils';\nimport { Route } from './plugin-routes';\nimport fs, { copy, pathExists, remove } from 'fs-extra';\nimport ora from 'ora';\nimport { HelmetData } from 'react-helmet-async';\nimport createDebugger from 'debug';\nimport { performance } from 'perf_hooks';\nimport pc from 'picocolors';\nimport { pathToFileURL } from 'url';\nimport { CLIBuildOption } from './cli';\nimport { normalizeSlash, withBase } from '../shared/utils';\n\nconst debug = createDebugger('island:build');\nconst islandInjectId = 'island:inject';\nexport const okMark = '\\x1b[32m✓\\x1b[0m';\nexport const failMark = '\\x1b[31m✖\\x1b[0m';\n\nexport type RenderFn = (\n  url: string,\n  helmetContext: object,\n  enableSpa: boolean\n) => Promise<{\n  appHtml: string;\n  propsData: string;\n  islandToPathMap: Record<string, string>;\n  pageData: unknown;\n}>;\n\ninterface ServerEntryExports {\n  render: RenderFn;\n  routes: Route[];\n}\n\nclass SSGBuilder {\n  #root: string;\n  #config: SiteConfig<unknown>;\n  #cliOptions: CLIBuildOption;\n  #clientBundle?: RollupOutput;\n  #serverBundle?: RollupOutput;\n  #distPath: string;\n  #islandsInjectCache: Map<string, Promise<string>> = new Map();\n\n  constructor(config: SiteConfig<unknown>, cliOptions: CLIBuildOption) {\n    this.#config = config;\n    this.#root = this.#config.root;\n    this.#cliOptions = cliOptions;\n    if (this.#config.outDir) {\n      this.#distPath = path.isAbsolute(this.#config.outDir)\n        ? this.#config.outDir\n        : join(this.#root, DIST_DIR, this.#config.outDir);\n    } else {\n      this.#distPath = join(this.#root, DIST_DIR, 'dist');\n    }\n  }\n\n  async build() {\n    const spinner = ora();\n    spinner.start('Building client + server bundles...');\n    try {\n      const [clientBundle, serverBundle] = await Promise.all([\n        this.#clientBuild(),\n        this.#ssrBuild()\n      ]);\n      spinner.stopAndPersist({\n        symbol: okMark\n      });\n\n      this.#clientBundle = clientBundle;\n      this.#serverBundle = serverBundle;\n\n      // Get complete css from server bundle\n      await copy(\n        join(TEMP_PATH, 'ssr', 'assets'),\n        join(this.#distPath, 'assets')\n      );\n\n      await fs.writeFile(\n        join(TEMP_PATH, 'package.json'),\n        JSON.stringify({ type: 'module' })\n      );\n\n      // Copy public assets\n      const publicDirInRoot = join(this.#root, PUBLIC_DIR);\n      if (await pathExists(publicDirInRoot)) {\n        await copy(publicDirInRoot, this.#distPath);\n      }\n\n      const serverEntryPath = join(SERVER_OUTPUT_PATH);\n      const { render, routes } = (await dynamicImport(\n        pathToFileURL(serverEntryPath)\n      )) as ServerEntryExports;\n      return [render, routes];\n    } catch (e) {\n      spinner.stopAndPersist({\n        symbol: failMark\n      });\n      throw e;\n    }\n  }\n\n  async renderPages(render: RenderFn, routes: Route[]) {\n    // Island components chunk\n    const clientEntryChunk = this.#clientBundle!.output.find(\n      (chunk) => chunk.type === 'chunk' && chunk.isEntry\n    );\n    const clientChunkCode = await fs.readFile(\n      join(this.#distPath, clientEntryChunk!.fileName),\n      'utf-8'\n    );\n    // We get style from server bundle because it will generate complete css\n    const styleAssets = this.#serverBundle!.output.filter(\n      (item) => item.type === 'asset' && item.fileName.endsWith('.css')\n    );\n    const { default: ora } = await dynamicImport('ora');\n    const spinner = ora();\n    spinner.start('Rendering page in server side...');\n    const clientChunkInfo = {\n      code: clientChunkCode,\n      fileName: clientEntryChunk!.fileName\n    };\n    await Promise.all(\n      routes.map((route) =>\n        this.#renderPage(render, route.path, clientChunkInfo, styleAssets)\n      )\n    );\n    await this.#render404Page(render, clientChunkInfo, styleAssets);\n    try {\n      await fs.copy(VENDOR_PATH, this.#distPath);\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n    spinner.stopAndPersist({\n      symbol: okMark\n    });\n  }\n\n  async end() {\n    if (!process.env.DEBUG) {\n      await remove(join(TEMP_PATH));\n    }\n  }\n\n  async islandsBuild(injectCode: string) {\n    return this.#baseBuild(false, {\n      build: {\n        minify: !process.env.NO_MINIFY,\n        outDir: join(TEMP_PATH),\n        ssrManifest: false,\n        rollupOptions: {\n          external: DEFAULT_EXTERNALS,\n          input: islandInjectId\n        }\n      },\n      plugins: [\n        {\n          name: 'island-inject',\n          enforce: 'post',\n          resolveId(id) {\n            if (id.includes(MASK_SPLITTER)) {\n              const [originId, importer] = id.split(MASK_SPLITTER);\n              return this.resolve(originId, importer, { skipSelf: true });\n            }\n            if (id === islandInjectId) {\n              return islandInjectId;\n            }\n          },\n          load(id) {\n            if (id === islandInjectId) {\n              return injectCode;\n            }\n          },\n          generateBundle(_options, bundle) {\n            for (const name in bundle) {\n              if (bundle[name].type === 'asset') {\n                delete bundle[name];\n              }\n            }\n          }\n        }\n      ]\n    });\n  }\n\n  async #clientBuild() {\n    return this.#baseBuild(false, {}, 'client');\n  }\n\n  async #ssrBuild() {\n    return this.#baseBuild(true, {}, 'ssr');\n  }\n\n  async #renderPage(\n    render: RenderFn,\n    routePath: string,\n    clientChunk: { code?: string; fileName?: string },\n    styleAssets: (OutputChunk | OutputAsset)[]\n  ) {\n    const helmetContext: HelmetData = {\n      context: {}\n    } as HelmetData;\n    const { appHtml, propsData, islandToPathMap, pageData } = await render(\n      routePath,\n      helmetContext.context,\n      this.#config.enableSpa!\n    );\n    const hasIsland = Object.keys(islandToPathMap).length > 0;\n    let injectIslandsPath = '';\n    // In island mode, we will bundle and inject island components code to html\n    if (hasIsland && !this.#config.enableSpa) {\n      const islandHash = createHash(JSON.stringify(islandToPathMap));\n      let injectBundlePromise = this.#islandsInjectCache.get(islandHash);\n\n      if (!injectBundlePromise) {\n        const rawInjectCode = this.#generateIslandInjectCode(islandToPathMap);\n        injectBundlePromise = (async () => {\n          const injectBundle = await this.islandsBuild(rawInjectCode);\n          try {\n            // Move island_inject chunk\n            await copy(\n              join(TEMP_PATH, 'assets'),\n              join(this.#distPath, 'assets')\n            );\n          } catch (e) {\n            // noop\n          }\n\n          return injectBundle.output[0].fileName;\n        })();\n        this.#islandsInjectCache.set(islandHash, injectBundlePromise);\n      }\n      injectIslandsPath = await injectBundlePromise;\n    }\n    const { helmet } = helmetContext.context!;\n\n    const headTag = this.#config.siteData?.head\n      ?.map((item) => {\n        const [tag, attrs, children] = item;\n        const attrString = Object.keys(attrs).reduce((pre, cur) => {\n          return `${pre} ${cur}=\"${attrs[cur]}\"`;\n        }, '');\n        if (children === undefined || children === null) {\n          return `<${tag} ${attrString} />`;\n        } else {\n          return `<${tag} ${attrString}>${children}</${tag}>`;\n        }\n      })\n      .join('\\n');\n    const normalizeVendorFilename = (fileName: string) =>\n      fileName.replace(/\\//g, '_') + '.js';\n    const withBaseUrl = (url: string) =>\n      withBase(url, this.#config.base || '/');\n    const html = `\n  <!DOCTYPE html>\n  <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n      <link rel=\"icon\" href=\"${\n        this.#config.siteData!.icon\n      }\" type=\"image/svg+xml\"></link>\n      ${headTag || ''}\n      ${helmet?.title?.toString() || ''}\n      ${helmet?.meta?.toString() || ''}\n      ${helmet?.link?.toString() || ''}\n      ${helmet?.style?.toString() || ''}\n      <script defer src='https://ga.jspm.io/npm:es-module-shims@1.6.0/dist/es-module-shims.js'></script>\n      <script type=\"importmap\">\n        {\n          \"imports\": {\n            ${DEFAULT_EXTERNALS.map(\n              (name) =>\n                `\"${name}\": \"${withBaseUrl(normalizeVendorFilename(name))}\"`\n            ).join(',')}\n          }\n        }\n      </script>\n\n      ${styleAssets\n        .map(\n          (item) =>\n            `<link rel=\"stylesheet\" href=\"${withBaseUrl(item.fileName)}\">`\n        )\n        .join('\\n')}\n\n    </head>\n    <body>\n      <div id=\"root\">${appHtml}</div>\n      ${\n        this.#config.enableSpa\n          ? `<script>window.ISLAND_PAGE_DATA=${JSON.stringify(\n              pageData\n            )};</script>`\n          : ''\n      }\n      ${\n        !this.#config.enableSpa && hasIsland\n          ? `<script id=\"island-props\">${JSON.stringify(\n              propsData\n            )}</script><script type=\"module\" src=\"${withBaseUrl(\n              injectIslandsPath\n            )}\"></script>`\n          : ''\n      }\n      ${\n        this.#config.enableSpa\n          ? `<script type=\"module\" src=\"${withBaseUrl(\n              clientChunk.fileName!\n            )}\"></script>`\n          : `<script type=\"module\">${clientChunk.code}</script>`\n      }\n    </body>\n  </html>`.trim();\n\n    const normalizeHtmlFilePath = (path: string) => {\n      const normalizedBase = normalizeSlash(this.#config.base || '/');\n\n      if (path.endsWith('/')) {\n        return `${path}index.html`.replace(normalizedBase, '');\n      }\n\n      return `${path}.html`.replace(normalizedBase, '');\n    };\n    const fileName = normalizeHtmlFilePath(routePath);\n    await fs.ensureDir(join(this.#distPath, dirname(fileName)));\n    await fs.writeFile(join(this.#distPath, fileName), html);\n  }\n\n  #render404Page(\n    render: RenderFn,\n    clientChunk: { code: string; fileName: string },\n    styleAssets: (OutputChunk | OutputAsset)[]\n  ) {\n    return this.#renderPage(render, '/404', clientChunk, styleAssets);\n  }\n\n  #generateIslandInjectCode(islandToPathMap: Record<string, string>) {\n    return `\n      ${Object.entries(islandToPathMap)\n        .map(([islandName, path]) => `import { ${islandName} } from '${path}';`)\n        .join('')}\n      window.ISLANDS = {\n        ${Object.entries(islandToPathMap)\n          .map(([islandName]) => `${islandName}`)\n          .join(',')}\n      };\n      window.ISLAND_PROPS = JSON.parse(\n        document.getElementById('island-props').textContent\n      );\n    `;\n  }\n\n  async #baseBuild(\n    isServer: boolean,\n    options: InlineConfig = {},\n    displayName?: string\n  ) {\n    const resolveViteConfig = async (\n      isServer: boolean\n    ): Promise<InlineConfig> => ({\n      ...options,\n      mode: 'production',\n      define: {\n        NODE_ENV: process.env.NODE_ENV || JSON.stringify('production')\n      },\n      root: this.#root,\n      optimizeDeps: { force: this.#cliOptions?.force },\n      plugins: [\n        await createVitePlugins(this.#config, isServer),\n        ...(options?.plugins || [])\n      ],\n      ssr: {},\n      build: {\n        minify: !process.env.NO_MINIFY && !isServer,\n        ssr: isServer,\n        outDir: isServer\n          ? join(TEMP_PATH, 'ssr')\n          : this.#distPath ?? join(this.#root, DIST_DIR),\n        cssCodeSplit: false,\n        ssrManifest: !isServer,\n        emptyOutDir: true,\n        rollupOptions: {\n          output: {\n            entryFileNames: isServer ? '[name].mjs' : undefined,\n            format: 'es'\n          },\n          input: isServer ? SERVER_ENTRY_PATH : CLIENT_ENTRY_PATH\n        },\n        sourcemap: this.#cliOptions?.sourcemap,\n        ...options?.build\n      }\n    });\n\n    const startTime = performance.now();\n    const buildResult = (await viteBuild(\n      await resolveViteConfig(isServer)\n    )) as RollupOutput;\n    if (displayName) {\n      const timeConsumed = (performance.now() - startTime).toFixed(2);\n      debug(`${displayName} build time: ${pc.blue(`${timeConsumed}ms`)}`);\n    }\n    return buildResult;\n  }\n}\n\nexport async function build(root: string, options: CLIBuildOption) {\n  const config = await resolveConfig(\n    root,\n    'build',\n    'production',\n    options.config\n  );\n  const builder = new SSGBuilder(config, options);\n\n  const [render, routes] = await builder.build();\n\n  await builder.renderPages(render as RenderFn, routes as Route[]);\n\n  await builder.end();\n}\n","import fs from 'fs';\nimport path, { join } from 'path';\nimport sirv from 'sirv';\nimport compression from 'compression';\nimport polka from 'polka';\nimport { resolveConfig } from './config';\nimport { DIST_DIR } from './constants';\n\nexport interface CLIServeOption {\n  base?: string;\n  root?: string;\n  port?: number;\n  host?: string;\n}\n\n// Serve ssg site in production\nexport async function serve(root: string, cliOptions: CLIServeOption) {\n  const port = cliOptions.port ?? 4173;\n  const host = cliOptions.host ?? 'localhost';\n  const config = await resolveConfig(root, 'serve', 'production');\n  const base = config.base?.replace(/^\\//, '').replace(/\\/$/, '') || '';\n  const notAnAsset = (pathname: string) => !pathname.includes('/assets/');\n\n  let distPath = '';\n  if (config.outDir) {\n    distPath = path.isAbsolute(config.outDir)\n      ? config.outDir\n      : join(config.root, DIST_DIR, config.outDir);\n  } else {\n    distPath = join(config.root, DIST_DIR, 'dist');\n  }\n  const notFoundPage = fs.readFileSync(path.resolve(distPath, './404.html'));\n  const onNoMatch: polka.Options['onNoMatch'] = (req, res) => {\n    res.statusCode = 404;\n    if (notAnAsset(req.path)) {\n      res.end(notFoundPage);\n    }\n  };\n\n  const compress = compression();\n  const serve = sirv(distPath, {\n    etag: true,\n    maxAge: 31536000,\n    immutable: true,\n    setHeaders(res, pathname) {\n      if (notAnAsset(pathname)) {\n        // force server validation for non-asset files since they\n        // are not fingerprinted\n        res.setHeader('cache-control', 'no-cache');\n      }\n    }\n  });\n\n  if (base) {\n    polka({ onNoMatch })\n      .use(base, serve, compression)\n      .listen(port, host, (err: Error) => {\n        if (err) throw err;\n        console.log(`Built site served at http://${host}:${port}/${base}/\\n`);\n      });\n  } else {\n    polka({ onNoMatch })\n      .use(compress, serve)\n      .listen(port, host, (err: Error) => {\n        if (err) throw err;\n        console.log(`Built site served at http://${host}:${port}/\\n`);\n      });\n  }\n}\n"]}