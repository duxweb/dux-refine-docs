import { ComponentType } from 'react';
import { UserConfig as UserConfig$1 } from 'vite';
import { PluggableList } from 'unified';
import { BabelOptions } from '@vitejs/plugin-react';

declare const isProduction: () => boolean;

declare namespace DefaultTheme {
    interface Config {
        /**
         * The logo file of the site.
         *
         * @example '/logo.svg'
         */
        logo?: Image;
        /**
         * Custom site title in navbar. If the value is undefined,
         * `config.title` will be used.
         */
        siteTitle?: string;
        /**
         * Custom outline title in the aside component.
         *
         * @default 'On this page'
         */
        outlineTitle?: string;
        /**
         * Whether to show the sidebar in right position.
         */
        outline?: boolean;
        /**
         * The nav items.
         */
        nav?: NavItem[];
        /**
         * The sidebar items.
         */
        sidebar?: Sidebar;
        /**
         * Info for the edit link. If it's undefined, the edit link feature will
         * be disabled.
         */
        editLink?: EditLink;
        /**
         * Set custom last updated text.
         *
         * @default 'Last updated'
         */
        lastUpdatedText?: string;
        /**
         * Set custom prev/next labels.
         */
        docFooter?: DocFooter;
        /**
         * The social links to be displayed at the end of the nav bar. Perfect for
         * placing links to social services such as GitHub, Twitter, Facebook, etc.
         */
        socialLinks?: SocialLink[];
        /**
         * The footer configuration.
         */
        footer?: Footer;
        /**
         * The prev page text.
         */
        prevPageText?: string;
        /**
         * The next page text.
         */
        nextPageText?: string;
        /**
         * Locale config
         */
        locales?: Record<string, LocaleConfig>;
        /**
         * Whether to open the full text search
         */
        search?: boolean;
        /**
         * Whether to use back top
         */
        backTop?: BackTopOptions;
    }
    /**
     * locale config
     */
    interface LocaleConfig {
        lang?: string;
        title?: string;
        langRoutePrefix?: string;
        description?: string;
        head?: HeadConfig[];
        label: string;
        selectText?: string;
        nav?: NavItem[];
        sidebar?: Sidebar;
        outlineTitle?: string;
        lastUpdatedText?: string;
        editLink?: EditLink;
        prevPageText?: string;
        nextPageText?: string;
    }
    type NavItem = NavItemWithLink | NavItemWithChildren;
    type NavItemWithLink = {
        text: string;
        link: string;
        /**
         * `activeMatch` is expected to be a regex string. We can't use actual
         * RegExp object here because it isn't serializable
         */
        activeMatch?: string;
    };
    type NavItemChildren = {
        text?: string;
        items: NavItemWithLink[];
    };
    interface NavItemWithChildren {
        text?: string;
        items: NavItemWithLink[];
    }
    type Image = string | {
        src: string;
        alt?: string;
    };
    interface Sidebar {
        [path: string]: SidebarGroup[];
    }
    interface SidebarGroup {
        text?: string;
        items: SidebarItem[];
        collapsed?: boolean;
        collapsable?: boolean;
    }
    type SidebarItem = {
        text: string;
        link: string;
    } | {
        text: string;
        link?: string;
        items: SidebarItem[];
    };
    interface EditLink {
        /**
         * Pattern for edit link.
         *
         * @example 'https://github.com/vuejs/vitepress/edit/main/docs/:path'
         */
        pattern: string;
        /**
         * Custom text for edit link.
         *
         * @default 'Edit this page'
         */
        text?: string;
    }
    interface DocFooter {
        /**
         * Custom label for previous page button.
         *
         * @default 'Previous page'
         */
        prev?: SidebarItem;
        /**
         * Custom label for next page button.
         *
         * @default 'Next page'
         */
        next?: SidebarItem;
    }
    interface SocialLink {
        icon: SocialLinkIcon;
        mode: 'link' | 'text' | 'img';
        content: string;
    }
    type SocialLinkIcon = 'discord' | 'facebook' | 'github' | 'instagram' | 'linkedin' | 'slack' | 'twitter' | 'youtube' | 'weixin' | 'qq' | 'juejin' | 'zhihu' | 'bilibili' | 'weibo' | {
        svg: string;
    };
    interface Footer {
        message?: string;
        copyright?: string;
    }
    interface LocaleLinks {
        text: string;
        items: LocaleLink[];
    }
    interface LocaleLink {
        text: string;
        link: string;
    }
    type BackTopOptions = boolean | {
        visibleHeight?: number;
        duration?: number;
        animation?: BackTopAnimation;
    };
    type BackTopAnimation = 'linear' | 'quadIn' | 'quadOut' | 'quadInOut' | 'cubicIn' | 'cubicOut' | 'cubicInOut' | 'quartIn' | 'quartOut' | 'quartInOut' | 'quintIn' | 'quintOut' | 'quintInOut' | 'sineIn' | 'sineOut' | 'sineInOut' | 'bounceIn' | 'bounceOut' | 'bounceInOut';
}

interface IslandPlugin {
    /**
     * Name of the plugin.
     */
    name: string;
    /**
     * Global style
     */
    globalStyles?: string;
    /**
     * Resolve.alias in build tool config.
     */
    alias?: Record<string, string>;
    /**
     * Define in build tool config.
     */
    define?: Record<string, string>;
    /**
     * Markdown options.
     */
    markdown?: {
        remarkPlugins?: PluggableList;
        rehypePlugins?: PluggableList;
    };
    /**
     * vite config.
     */
    vite?: UserConfig$1;
    /**
     * To ensure hmr works properly, we need to watch some files.
     */
    watchFiles?: string[];
}

interface Header {
    id: string;
    text: string;
    depth: number;
}
type HeadConfig = [string, Record<string, string>] | [string, Record<string, string>, string];
interface UserConfig<ThemeConfig = unknown> {
    /**
     * Base path of the site.
     */
    base?: string;
    /**
     * Path to html icon file.
     */
    icon?: string;
    /**
     * Source directory of the site.
     */
    srcDir?: string;
    /**
     * Language of the site.
     */
    lang?: string;
    /**
     * Title of the site.
     */
    title?: string;
    /**
     * Description of the site.
     */
    description?: string;
    /**
     * Custom head config.
     */
    head?: HeadConfig[];
    /**
     * Theme config.
     */
    themeConfig?: ThemeConfig;
    /**
     * Output directory of the site.
     */
    outDir?: string;
    /**
     * Temporary directory of the site.
     */
    tempDir?: string;
    /**
     * Vite Configuration
     */
    vite?: UserConfig$1;
    /**
     * Enable single page application in production.
     */
    enableSpa?: boolean;
    /**
     * Whether to fail builds when there are dead links.
     */
    allowDeadLinks?: boolean;
    /**
     * Whether dark mode/light mode toggle button is displayed.
     */
    appearance?: boolean;
    /**
     * The custom config of vite-plugin-route
     */
    route?: RouteOptions;
    /**
     * The custom config of markdown compile
     */
    markdown?: MarkdownOptions;
    /**
     * Island plugins
     */
    plugins?: IslandPlugin[];
    /**
     * Babel plugins which will be applied to @vitejs/plugin-react
     */
    babel?: BabelOptions;
}
interface SiteData<ThemeConfig = unknown> {
    root: string;
    base: string;
    lang: string;
    title: string;
    description: string;
    icon: string;
    head: HeadConfig[];
    themeConfig: ThemeConfig;
    appearance: boolean;
}
interface Hero {
    name: string;
    text: string;
    tagline: string;
    image?: {
        src: string;
        alt: string;
    };
    actions: {
        text: string;
        link: string;
        theme: 'brand' | 'alt';
    }[];
}
interface Feature {
    icon: string;
    title: string;
    details: string;
}
interface SiteConfig<ThemeConfig = unknown> extends Omit<UserConfig, 'themeConfig'> {
    root: string;
    srcDir: string;
    configPath?: string;
    configDeps?: string[];
    themeDir?: string;
    outDir?: string;
    siteData?: SiteData<ThemeConfig>;
    plugins?: IslandPlugin[];
}
type ComponentPropsWithIsland<T = unknown> = T & {
    __island?: boolean;
};
interface PageModule<T extends ComponentType<unknown>> {
    default: T;
    frontmatter?: FrontMatterMeta;
    content?: string;
    [key: string]: unknown;
}
type PageType = 'home' | 'doc' | 'api' | 'custom' | '404';
interface FrontMatterMeta {
    title: string;
    description: string;
    api: boolean;
    pageType: PageType;
    features?: Feature[];
    hero?: Hero;
    sidebar?: boolean;
    outline?: boolean;
    lineNumbers?: boolean;
}
interface PageData {
    siteData: SiteData<DefaultTheme.Config>;
    pagePath: string;
    relativePagePath: string;
    lastUpdatedTime?: string;
    title?: string;
    frontmatter?: FrontMatterMeta;
    description?: string;
    pageType: PageType;
    toc?: Header[];
    routePath: string;
    content?: string;
    subModules?: PageModule<ComponentType<unknown>>[];
}
interface RouteOptions {
    /**
     * The directory to search for pages
     */
    root?: string;
    /**
     * The basename of the site
     */
    prefix?: string;
    /**
     * The extension name of the filepath that will be converted to a route
     * @default ['js','jsx','ts','tsx','md','mdx']
     */
    extensions?: string[];
    /**
     * Include extra files from being converted to routes
     */
    include?: string[];
    /**
     * Exclude files from being converted to routes
     */
    exclude?: string[];
}
interface MarkdownOptions {
    remarkPlugins?: PluggableList;
    rehypePlugins?: PluggableList;
    lineNumbers?: boolean;
    targetBlankWhiteList?: (string | RegExp)[];
}

interface RouteMeta {
    routePath: string;
    basePath: string;
    absolutePath: string;
}
declare const normalizeRoutePath: (routePath: string) => string;
declare class RouteService {
    #private;
    private scanDir;
    constructor(scanDir: string, options: RouteOptions);
    init(): Promise<void>;
    static getRoutePathFromFile(filePath: string, root: string, base: string): string | undefined;
    addRoute(filePath: string): void;
    removeRoute(filePath: string): void;
    getRoutes(): RouteMeta[];
    isExistRoute(routePath: string): RouteMeta | undefined;
    generateRoutesCode(ssr?: boolean): string;
    getExtensions(): string[];
}

declare let routeService: RouteService;

declare function defineConfig<ThemeConfig = DefaultTheme.Config>(config: UserConfig<ThemeConfig>): UserConfig<ThemeConfig>;

export { ComponentPropsWithIsland, DefaultTheme, Feature, FrontMatterMeta, HeadConfig, Header, Hero, IslandPlugin, MarkdownOptions, PageData, PageModule, PageType, RouteOptions, SiteConfig, SiteData, UserConfig, defineConfig, isProduction, normalizeRoutePath, routeService };
