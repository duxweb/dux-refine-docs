{"version":3,"sources":["../../src/node/constants/index.ts","../../src/node/config.ts","../../src/shared/constants/index.ts","../../src/node/plugin-routes/RouteService.ts","../../src/node/plugin-routes/index.ts","../../src/shared/utils/index.ts"],"sourcesContent":["import { join } from 'path';\nimport { fileURLToPath } from 'url';\n\nexport const isProduction = () => process.env.NODE_ENV === 'production';\n\nexport const TS_REGEX = /(c|m)?tsx?$/;\n\nexport const MD_REGEX = /\\.mdx?$/;\n\nexport const PACKAGE_ROOT_PATH = join(\n  fileURLToPath(import.meta.url),\n  '../../..'\n);\n\nexport const CLIENT_RUNTIME_PATH = join(PACKAGE_ROOT_PATH, 'src/runtime');\n\nexport const SHARED_PATH = join(PACKAGE_ROOT_PATH, 'src/shared');\n\nexport const CLIENT_EXPORTS_PATH = join(CLIENT_RUNTIME_PATH, 'index.ts');\n\nexport const CLIENT_ENTRY_PATH = join(CLIENT_RUNTIME_PATH, 'client-entry.tsx');\n\nexport const SERVER_ENTRY_PATH = join(CLIENT_RUNTIME_PATH, 'ssr-entry.tsx');\n\nexport const DEFAULT_THEME_PATH = join(PACKAGE_ROOT_PATH, 'src/theme-default');\n\nexport const PUBLIC_DIR = 'public';\n\nexport const TEMP_PATH = join(PACKAGE_ROOT_PATH, 'node_modules', '.island');\n\nexport const DIST_DIR = join('.island');\n\nexport const SERVER_BUNDLE_FILE = 'ssr-entry.mjs';\n\nexport const SERVER_OUTPUT_PATH = join(TEMP_PATH, 'ssr', SERVER_BUNDLE_FILE);\n\nexport const ROUTE_PATH = join(TEMP_PATH, 'routes.tsx');\n\nexport const DEFAULT_HTML_PATH = join(PACKAGE_ROOT_PATH, 'template.html');\n\nexport const MASK_SPLITTER = '!!ISLAND!!';\n\nexport const DEFAULT_EXTERNALS: string[] = [\n  'react',\n  'react-dom',\n  'react-dom/client',\n  'react/jsx-runtime'\n];\n\nexport const CLI_BUNDLE_OUTDIR = join(PACKAGE_ROOT_PATH, 'dist', 'node');\n\nexport const RUNTIME_BUNDLE_OUTDIR = join(PACKAGE_ROOT_PATH, 'dist', 'runtime');\n\nexport const ISLAND_JSX_RUNTIME_PATH = RUNTIME_BUNDLE_OUTDIR;\n\nexport const ISLAND_CLI_PATH = join(CLI_BUNDLE_OUTDIR, 'cli.js');\n\nexport const VENDOR_PATH = join(PACKAGE_ROOT_PATH, 'vendors');\n\nexport const DIRECTIVE_TYPES: string[] = ['tip', 'warning', 'danger', 'info'];\n\nexport const CUSTOM_GLOBAL_STYLE = 'virtual:custom-styles';\n\nexport const CUSTOM_UI_COMPONENTS = 'virtual:ui-components';\n","import fs from 'fs-extra';\nimport path from 'path';\nimport pc from 'picocolors';\nimport { APPEARANCE_KEY } from '../shared/constants';\nimport { DEFAULT_THEME_PATH } from './constants';\nimport {\n  DefaultTheme,\n  HeadConfig,\n  SiteConfig,\n  SiteData,\n  UserConfig\n} from '../shared/types';\nimport { loadConfigFromFile } from 'vite';\n\nconst { pathExistsSync } = fs;\n\ntype RawConfig<ThemeConfig = unknown> =\n  | UserConfig<ThemeConfig>\n  | Promise<UserConfig<ThemeConfig>>\n  | (() => UserConfig<ThemeConfig> | Promise<UserConfig<ThemeConfig>>);\n\n/**\n * resolve .island files\n */\nconst resolve = (root: string, ...files: string[]) =>\n  path.resolve(root, '.island', ...files);\n\n/**\n * Get default config fileName or user custom config fileName.\n */\nconst getConfigFileName = (customizePath?: string) => {\n  if (customizePath) {\n    const [path] = customizePath.split('.');\n    return path;\n  } else {\n    return 'config';\n  }\n};\n/**\n * Get user config path.\n */\nconst getUserConfigPath = (root: string, customizePath?: string) => {\n  try {\n    const supportExtensions = ['js', 'ts'];\n    const configFileName = getConfigFileName(customizePath);\n    const configPath = supportExtensions\n      .map((extension) => resolve(root, `${configFileName}.${extension}`))\n      .find(pathExistsSync);\n    if (configFileName !== 'config' && !pathExistsSync(configPath!)) {\n      const errorPath = resolve(root, `${customizePath}`);\n      throw new Error(`failed to load config from ${errorPath}`);\n    }\n    return configPath;\n  } catch (e) {\n    console.log(pc.red('failed to load config file'));\n    throw e;\n  }\n};\n/**\n * resolve user`s config\n */\nexport async function resolveUserConfig(\n  root: string,\n  command: 'serve' | 'build',\n  mode: 'development' | 'production',\n  customizeConfig?: string\n): Promise<[string, UserConfig<DefaultTheme.Config>, string[]]> {\n  const configPath = getUserConfigPath(root, customizeConfig)!;\n  // Use vite internal config loader\n  const result = await loadConfigFromFile({ command, mode }, configPath, root);\n  if (result) {\n    const {\n      config: rawConfig = {} as RawConfig,\n      dependencies = [],\n      path: configPath\n    } = result;\n    // Support multi config type:\n    // 1. object\n    // 2. promise\n    // 3. function (async/sync)\n    const userConfig = await (typeof rawConfig === 'function'\n      ? rawConfig()\n      : rawConfig);\n    return [\n      configPath,\n      userConfig as UserConfig<DefaultTheme.Config>,\n      dependencies\n    ];\n  } else {\n    return [configPath, {} as UserConfig<DefaultTheme.Config>, []];\n  }\n}\n\nfunction resolveSiteDataHead(userConfig?: UserConfig): HeadConfig[] {\n  const head = userConfig?.head ?? [];\n\n  // add inline script to apply dark mode, if user enables the feature.\n  // this is required to prevent \"flush\" on initial page load.\n  if (userConfig?.appearance ?? true) {\n    head.push([\n      'script',\n      { id: 'check-dark-light' },\n      `\n        ;(() => {\n          const saved = localStorage.getItem('${APPEARANCE_KEY}')\n          const prefereDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n          if (!saved || saved === 'auto' ? prefereDark : saved === 'dark') {\n            document.documentElement.classList.add('dark')\n          }\n        })()\n      `\n    ]);\n  }\n\n  return head;\n}\n\nexport function resolveSiteData(\n  userConfig: UserConfig<DefaultTheme.Config>,\n  root: string\n): SiteData<DefaultTheme.Config> {\n  return {\n    lang: userConfig.lang || 'en-US',\n    title: userConfig.title || 'Island',\n    description: userConfig.description || 'Island',\n    themeConfig: userConfig.themeConfig || {},\n    head: resolveSiteDataHead(userConfig),\n    base: userConfig.base || '',\n    icon: userConfig.icon || '',\n    root,\n    appearance: userConfig.appearance ?? true\n  };\n}\n\nexport async function resolveConfig(\n  root: string,\n  command: 'serve' | 'build',\n  mode: 'development' | 'production',\n  customizeConfig?: string\n): Promise<SiteConfig> {\n  const [configPath, userConfig, configDeps] = await resolveUserConfig(\n    root,\n    command,\n    mode,\n    customizeConfig\n  );\n  const srcDir = path.resolve(root, userConfig.srcDir || '');\n  const userThemeDir = resolve(root, 'theme');\n  const themeDir = pathExistsSync(userThemeDir)\n    ? userThemeDir\n    : DEFAULT_THEME_PATH;\n\n  // In Node.js, there is no access to delete the cache of a es module.\n  // https://github.com/nodejs/help/issues/2806\n  // So we need to clear the cache of the config file manually.\n  // Then, when you modify the plugin code, then the dev server will reload the latest plugin code and make the development more convenient.\n  const { pluginSearch } = await import(\n    `@islandjs/plugin-search/dist/index.js?t=${Date.now()}`\n  );\n\n  const { pluginBackTop } = await import(\n    `@islandjs/plugin-backtop/dist/index.js?t=${Date.now()}`\n  );\n\n  const DEFAULT_PLUGINS = [pluginSearch(), pluginBackTop()];\n  const siteConfig: SiteConfig<DefaultTheme.Config> = {\n    root,\n    srcDir,\n    outDir: userConfig.outDir,\n    themeDir,\n    configPath,\n    configDeps,\n    base: userConfig.base || '',\n    tempDir: resolve(root, 'node_modules', '.island'),\n    vite: {\n      ...userConfig.vite,\n      base: userConfig.base ?? '/'\n    },\n    allowDeadLinks: userConfig.allowDeadLinks ?? false,\n    siteData: resolveSiteData(userConfig, root),\n    enableSpa: userConfig.enableSpa ?? true,\n    route: userConfig.route ?? {},\n    markdown: userConfig.markdown ?? {},\n    plugins: DEFAULT_PLUGINS.concat(userConfig.plugins || [])\n  };\n\n  return siteConfig;\n}\n\nexport function defineConfig<ThemeConfig = DefaultTheme.Config>(\n  config: UserConfig<ThemeConfig>\n) {\n  return config;\n}\n","export const APPEARANCE_KEY = 'island-theme-appearance';\n\nexport const TARGET_BLANK_WHITE_LIST = [\n  'https://island-tutorial.sanyuan0704.top',\n  'https://island.sanyuan0704.top',\n  'https://islandjs.dev'\n];\n\nexport const EXTERNAL_URL_RE = /^(https?:)?\\/\\//;\n","import { normalizePath } from 'vite';\nimport fastGlob from 'fast-glob';\nimport fs from 'fs-extra';\nimport { RUNTIME_BUNDLE_OUTDIR } from '../constants';\nimport path from 'path';\nimport { DEFAULT_EXCLUDE, DEFAULT_PAGE_EXTENSIONS } from '.';\nimport { RouteOptions } from 'shared/types';\nimport { withBase } from '../../shared/utils';\n\nexport interface RouteMeta {\n  routePath: string;\n  basePath: string;\n  absolutePath: string;\n}\n\nexport const addLeadingSlash = (str: string) => {\n  return str.startsWith('/') ? str : `/${str}`;\n};\n\nexport const normalizeRoutePath = (routePath: string) => {\n  routePath = routePath.replace(/\\.(.*)?$/, '').replace(/index$/, '');\n  return addLeadingSlash(routePath);\n};\n\nconst lazyWithPreloadRuntimeCode = fs.readFileSync(\n  path.join(RUNTIME_BUNDLE_OUTDIR, 'lazyWithPreload.js'),\n  'utf-8'\n);\n\nexport class RouteService {\n  #routeData: RouteMeta[] = [];\n  #extensions: string[] = [];\n  #include: string[] = [];\n  #exclude: string[] = [];\n  #base = '';\n\n  constructor(private scanDir: string, options: RouteOptions) {\n    this.#extensions = options.extensions || DEFAULT_PAGE_EXTENSIONS;\n    this.#include = options.include || [];\n    this.#exclude = options.exclude || [];\n    this.#base = options.prefix || '';\n  }\n\n  async init() {\n    const files = fastGlob\n      .sync([`**/*.{${this.#extensions.join(',')}}`, ...this.#include], {\n        cwd: this.scanDir,\n        absolute: true,\n        ignore: [...DEFAULT_EXCLUDE, ...this.#exclude]\n      })\n      .sort();\n    files.forEach((file) => this.addRoute(file));\n  }\n\n  static getRoutePathFromFile(\n    filePath: string,\n    root: string,\n    base: string\n  ): string | undefined {\n    const fileRelativePath = path.relative(root, filePath);\n    const routePath = normalizeRoutePath(fileRelativePath);\n    return withBase(routePath, base);\n  }\n\n  addRoute(filePath: string) {\n    const fileRelativePath = normalizePath(\n      path.relative(this.scanDir, filePath)\n    );\n    const routePath = normalizeRoutePath(fileRelativePath);\n    const absolutePath = path.join(this.scanDir, fileRelativePath);\n\n    this.#routeData.push({\n      routePath,\n      basePath: this.scanDir,\n      absolutePath: normalizePath(absolutePath)\n    });\n  }\n\n  removeRoute(filePath: string) {\n    const fileRelativePath = path.relative(this.scanDir, filePath);\n    const routePath = normalizeRoutePath(fileRelativePath);\n    this.#routeData = this.#routeData.filter(\n      (route) => route.routePath !== routePath\n    );\n  }\n\n  getRoutes() {\n    return this.#routeData;\n  }\n\n  isExistRoute(routePath: string) {\n    return this.#routeData.find((route) => route.routePath === routePath);\n  }\n\n  generateRoutesCode(ssr?: boolean) {\n    return `\n${lazyWithPreloadRuntimeCode.toString()};\nimport React from 'react';\n${this.#routeData\n  .map((route, index) => {\n    return ssr\n      ? `import * as Route${index} from '${route.absolutePath}';`\n      : `const Route${index} = lazyWithPreload(() => import('${route.absolutePath}'))`;\n  })\n  .join('\\n')}\nexport const routes = [\n${this.#routeData\n  .map((route, index) => {\n    // In ssr, we don't need to import component dynamically.\n    const preload = ssr ? `() => Route${index}` : `Route${index}.preload`;\n    const component = ssr ? `Route${index}.default` : `Route${index}`;\n    /**\n     * For SSR, example:\n     * {\n     *   route: '/',\n     *   element: jsx(Route0),\n     *   preload: Route0.preload,\n     *   filePath: '/Users/xxx/xxx/index.md'\n     * }\n     *\n     * For client render, example:\n     * {\n     *   route: '/',\n     *   element: jsx(Route0.default),\n     *   preload: Route0.preload,\n     *   filePath: '/Users/xxx/xxx/index.md'\n     * }\n     */\n    return `{ path: '${withBase(\n      route.routePath,\n      this.#base\n    )}', element: React.createElement(${component}), filePath: '${\n      route.absolutePath\n    }', preload: ${preload} }`;\n  })\n  .join(',\\n')}\n];\n`;\n  }\n\n  getExtensions() {\n    return this.#extensions;\n  }\n}\n","import path from 'path';\nimport { PageModule } from '@shared/types';\nimport type { Plugin } from 'vite';\nimport { normalizePath } from 'vite';\nimport { RouteService } from './RouteService';\nimport type { ComponentType } from 'react';\nimport { RouteOptions } from 'shared/types/index';\n\nexport const DEFAULT_EXCLUDE = ['**/node_modules/**', '**/.*', '**/dist/**'];\n\n/**\n * How does the conventional route work?\n * Essentially, it turns files into route object, e.g. src/pages/index.tsx -> { path: '/', element: <Index /> }\n * Implementation details:\n * 1. Find all files under src/pages (or the configured directory)\n * 2. Convert the file path to a route object\n * 3. Merge the route objects and generate route module code\n */\nexport interface Route {\n  path: string;\n  element: React.ReactElement;\n  filePath: string;\n  preload: () => Promise<PageModule<ComponentType<unknown>>>;\n}\n\nexport const CONVENTIONAL_ROUTE_ID = 'virtual:routes';\n\nexport const DEFAULT_PAGE_EXTENSIONS = ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'];\n\n// It is convenient for other plugins to obtain route information\nexport let routeService: RouteService;\n\nlet pageExtensionsReg: RegExp;\n\nexport function pluginRoutes(options: RouteOptions = {}): Plugin {\n  const { root = 'src' } = options;\n  let scanDir: string;\n  return {\n    name: 'island:vite-plugin-routes',\n    async configResolved() {\n      scanDir = path.isAbsolute(root)\n        ? path.join(root)\n        : path.join(process.cwd(), root);\n      routeService = new RouteService(normalizePath(scanDir), options);\n      await routeService.init();\n      pageExtensionsReg = new RegExp(\n        `\\\\.(${routeService.getExtensions().join('|')})$`\n      );\n    },\n\n    resolveId(id: string) {\n      if (id === CONVENTIONAL_ROUTE_ID) {\n        // This tells Vite that this is a virtual module\n        return '\\0' + CONVENTIONAL_ROUTE_ID;\n      }\n    },\n    load(id: string, options) {\n      if (id === '\\0' + CONVENTIONAL_ROUTE_ID) {\n        return {\n          code: routeService.generateRoutesCode(options?.ssr),\n          moduleSideEffects: false\n        };\n      }\n    },\n\n    configureServer(server) {\n      const fileChange = () => {\n        const virtualRouteMod = server.moduleGraph.getModuleById(\n          `\\0${CONVENTIONAL_ROUTE_ID}`\n        );\n        if (virtualRouteMod) {\n          server.moduleGraph.invalidateModule(virtualRouteMod!);\n          server.ws.send({\n            type: 'full-reload'\n          });\n        }\n      };\n      server.watcher\n        .add(scanDir)\n        .on('add', async (file) => {\n          if (file.startsWith(scanDir) && pageExtensionsReg.test(file)) {\n            await routeService.addRoute(file);\n            fileChange();\n          }\n        })\n        .on('unlink', async (file) => {\n          if (file.startsWith(scanDir) && pageExtensionsReg.test(file)) {\n            await routeService.removeRoute(file);\n            fileChange();\n          }\n        });\n    }\n  };\n}\n\nexport { normalizeRoutePath } from './RouteService';\n","import { EXTERNAL_URL_RE } from '@shared/constants';\n\nexport const queryRE = /\\?.*$/s;\nexport const hashRE = /#.*$/s;\n\nexport const cleanUrl = (url: string): string =>\n  url.replace(hashRE, '').replace(queryRE, '');\n\nexport const inBrowser = () => typeof window !== 'undefined';\n\nexport function addLeadingSlash(url: string) {\n  return url.charAt(0) === '/' || url.startsWith('https') ? url : '/' + url;\n}\n\nexport function removeTrailingSlash(url: string) {\n  return url.charAt(url.length - 1) === '/' ? url.slice(0, -1) : url;\n}\n\nexport function normalizeSlash(url: string) {\n  return removeTrailingSlash(addLeadingSlash(url));\n}\n\nexport function withBase(url: string, base: string) {\n  if (EXTERNAL_URL_RE.test(url)) {\n    return url;\n  }\n  const normalizedBase = normalizeSlash(base);\n  const normalizedUrl = addLeadingSlash(url);\n  return normalizedBase ? `${normalizedBase}${normalizedUrl}` : normalizedUrl;\n}\n"],"mappings":"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","names":["join","fileURLToPath","isProduction","TS_REGEX","MD_REGEX","PACKAGE_ROOT_PATH","CLIENT_RUNTIME_PATH","SHARED_PATH","CLIENT_EXPORTS_PATH","CLIENT_ENTRY_PATH","SERVER_ENTRY_PATH","DEFAULT_THEME_PATH","PUBLIC_DIR","TEMP_PATH","DIST_DIR","SERVER_BUNDLE_FILE","SERVER_OUTPUT_PATH","ROUTE_PATH","DEFAULT_HTML_PATH","MASK_SPLITTER","DEFAULT_EXTERNALS","CLI_BUNDLE_OUTDIR","RUNTIME_BUNDLE_OUTDIR","ISLAND_JSX_RUNTIME_PATH","ISLAND_CLI_PATH","VENDOR_PATH","DIRECTIVE_TYPES","CUSTOM_GLOBAL_STYLE","CUSTOM_UI_COMPONENTS","fs","path","pc","APPEARANCE_KEY","TARGET_BLANK_WHITE_LIST","EXTERNAL_URL_RE","loadConfigFromFile","pathExistsSync","fs","resolve","root","files","path","getConfigFileName","customizePath","getUserConfigPath","supportExtensions","configFileName","configPath","extension","errorPath","e","pc","resolveUserConfig","command","mode","customizeConfig","result","rawConfig","dependencies","userConfig","resolveSiteDataHead","head","APPEARANCE_KEY","resolveSiteData","resolveConfig","configDeps","srcDir","userThemeDir","themeDir","DEFAULT_THEME_PATH","pluginSearch","pluginBackTop","DEFAULT_PLUGINS","defineConfig","config","normalizePath","fastGlob","fs","path","path","normalizePath","DEFAULT_EXCLUDE","CONVENTIONAL_ROUTE_ID","DEFAULT_PAGE_EXTENSIONS","routeService","pageExtensionsReg","pluginRoutes","options","root","scanDir","path","RouteService","normalizePath","id","server","fileChange","virtualRouteMod","file","queryRE","hashRE","cleanUrl","url","addLeadingSlash","url","removeTrailingSlash","normalizeSlash","withBase","base","EXTERNAL_URL_RE","normalizedBase","normalizedUrl","addLeadingSlash","str","normalizeRoutePath","routePath","lazyWithPreloadRuntimeCode","fs","path","RUNTIME_BUNDLE_OUTDIR","RouteService","scanDir","options","#extensions","DEFAULT_PAGE_EXTENSIONS","#include","#exclude","#base","#routeData","fastGlob","DEFAULT_EXCLUDE","file","filePath","root","base","fileRelativePath","withBase","normalizePath","absolutePath","route","ssr","index","preload","component"]}