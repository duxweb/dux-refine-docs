/**
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist').Node} Node
 *
 * @callback Visitor
 * @param {Node} node
 * @param {number} index
 * @param {Parent} parent
 * @returns {void}
 *
 * @callback Visit
 * @param {Parent} node
 * @returns {void}
 */
/**
 * Wrap `visitor` to be called for each child in the nodes later given to
 * `visit`.
 *
 * @param {Visitor} visitor
 * @returns {Visit}
 */
export function visitChildren(visitor: Visitor): Visit
export type Parent = import('unist').Parent
export type Node = import('unist').Node
export type Visitor = (node: Node, index: number, parent: Parent) => void
export type Visit = (node: Parent) => void
