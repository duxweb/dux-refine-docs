import { name as isValidIdentifierName } from 'estree-util-is-identifier-name';
import { valueToEstree } from 'estree-util-value-to-estree';
import { parse as parseToml } from 'toml';
import { parse as parseYaml } from 'yaml';
/**
 * Create an MDX ESM export AST node from an object.
 *
 * Each key of the object will be used as the export name.
 *
 * @param object The object to create an export node for.
 * @returns The MDX ESM node.
 */
function createExport(object) {
    return {
        type: 'mdxjsEsm',
        value: '',
        data: {
            estree: {
                type: 'Program',
                sourceType: 'module',
                body: [
                    {
                        type: 'ExportNamedDeclaration',
                        specifiers: [],
                        declaration: {
                            type: 'VariableDeclaration',
                            kind: 'const',
                            declarations: Object.entries(object).map(([identifier, val]) => {
                                if (!isValidIdentifierName(identifier)) {
                                    throw new Error(`Frontmatter keys should be valid identifiers, got: ${JSON.stringify(identifier)}`);
                                }
                                return {
                                    type: 'VariableDeclarator',
                                    id: { type: 'Identifier', name: identifier },
                                    init: valueToEstree(val),
                                };
                            }),
                        },
                    },
                ],
            },
        },
    };
}
/**
 * A remark plugin to expose frontmatter data as named exports.
 *
 * @param options Optional options to configure the output.
 * @returns A unified transformer.
 */
const remarkMdxFrontmatter = ({ name, parsers, } = {}) => {
    const allParsers = {
        yaml: parseYaml,
        toml: parseToml,
        ...parsers,
    };
    return (ast) => {
        const imports = [];
        if (name && !isValidIdentifierName(name)) {
            throw new Error(`If name is specified, this should be a valid identifier name, got: ${JSON.stringify(name)}`);
        }
        for (const node of ast.children) {
            if (!Object.hasOwnProperty.call(allParsers, node.type)) {
                continue;
            }
            const parser = allParsers[node.type];
            const { value } = node;
            const data = parser(value);
            if (data == null) {
                continue;
            }
            if (!name && typeof data !== 'object') {
                throw new Error(`Expected frontmatter data to be an object, got:\n${value}`);
            }
            imports.push(createExport(name ? { [name]: data } : data));
        }
        if (name && !imports.length) {
            imports.push(createExport({ [name]: undefined }));
        }
        ast.children.unshift(...imports);
    };
};
export default remarkMdxFrontmatter;
